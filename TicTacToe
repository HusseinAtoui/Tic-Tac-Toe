#include <iostream>
#include <stdlib.h>
#include <time.h>
using namespace std;

struct player
{
    string name;
    char symbol;
    int lastMove;
};

// function that displays the board of game
void displayBoard(char board[9])
{
    cout << "\n";
    cout << " " << board[0] << " " << "|" << " " << board[1] << " " << "|" << " " << board[2] << " " << "\n";
    cout << "---|---|---" << "\n";
    cout << " " << board[3] << " " << "|" << " " << board[4] << " " << "|" << " " << board[5] << " " << "\n";
    cout << "---|---|---" << "\n";
    cout << " " << board[6] << " " << "|" << " " << board[7] << " " << "|" << " " << board[8] << " " << "\n";
    cout << "\n";
}

// places the moves of player
void movePlacement(char board[9], char player)
{
    int move;
    do
    {
        cout << "Enter a number between [1-9]: ";
        cin >> move;

        if (cin.fail()) // not an integer
        {
            cin.clear();
            cin.ignore();
            cout << "Invalid input, please enter a number between [1-9]. \n\n";
            continue;
        }

        move--;

        if (board[move] == ' ')
        {
            board[move] = player;
            break;
        }
        else if (move < 0 || move > 8)
        {
            cout << "Invalid move, the number should be between [1-9]. \n\n";
        }
        else
        {
            cout << "Invalid move, the number is already chosen. \n\n";
        }
    } while (true);
}

// checks if the bot can perform a winning move || can use it for opp to check if he can wein and place it to block him
int botCheckWin(char board[9], char player, int move)
{
    for (int i = 0; i < 9; i++)
    {
        if (board[i] == ' ')
        {
            board[i] = player;

            if ((board[0] == player && board[1] == player && board[2] == player) ||
                (board[3] == player && board[4] == player && board[5] == player) ||
                (board[6] == player && board[7] == player && board[8] == player) ||
                (board[0] == player && board[3] == player && board[6] == player) ||
                (board[1] == player && board[4] == player && board[7] == player) ||
                (board[2] == player && board[5] == player && board[8] == player) ||
                (board[0] == player && board[4] == player && board[8] == player) ||
                (board[2] == player && board[4] == player && board[6] == player))
            {
                board[i] = ' ';
                move = i;
                return move; // found win
            }
            board[i] = ' ';
        }
    }
    return 0;
}

// 1 player - bot vs player: generates move
void botMovePlacement(char board[9], char curplayer, char oppPlayer)
{
    int move = -1;

    // check win possible case
    if (botCheckWin(board, curplayer, move) != 0)
    {
        move = botCheckWin(board, curplayer, move);
        board[move] = curplayer;
        return;
    }

    // check opp win case to block
    if (botCheckWin(board, oppPlayer, move) != 0)
    {
        move = botCheckWin(board, oppPlayer, move);
        board[move] = curplayer;
        return;
    }

    // random case
    srand(time(0));
    do
    {
        move = rand() % 9;
    } while (board[move] != ' ');

    board[move] = curplayer;
}

// returns 0 (no win), 1 (win), 2 (tie)
int checkWin(char board[9], struct player player)
{
    // row 1
    if (board[0] == board[1] && board[1] == board[2] && (board[0] == 'X' || board[0] == 'O'))
    {
        if (board[0] == player.symbol)
            return 1;
    }
    // row 2
    else if (board[3] == board[4] && board[4] == board[5] && (board[3] == 'X' || board[3] == 'O'))
    {
        if (board[3] == player.symbol)
            return 1;
    }
    // row 3
    else if (board[6] == board[7] && board[7] == board[8] && (board[6] == 'X' || board[6] == 'O'))
    {
        if (board[6] == player.symbol)
            return 1;
    }

    // col 1
    else if (board[0] == board[3] && board[3] == board[6] && (board[0] == 'X' || board[0] == 'O'))
    {
        if (board[0] == player.symbol)
            return 1;
    }
    // col 2
    else if (board[1] == board[4] && board[4] == board[7] && (board[1] == 'X' || board[1] == 'O'))
    {
        if (board[1] == player.symbol)
            return 1;
    }
    // col 3
    else if (board[2] == board[5] && board[5] == board[8] && (board[2] == 'X' || board[2] == 'O'))
    {
        if (board[2] == player.symbol)
            return 1;
    }

    // diagonal 1
    else if (board[0] == board[4] && board[4] == board[8] && (board[0] == 'X' || board[0] == 'O'))
    {
        if (board[0] == player.symbol)
            return 1;
    }
    // diagonal 2
    else if (board[2] == board[4] && board[4] == board[6] && (board[2] == 'X' || board[2] == 'O'))
    {
        if (board[2] == player.symbol)
            return 1;
    }

    //  tie
    int tie_counter = 0;
    for (int i = 0; i < 9; i++)
    {
        if (board[i] != ' ')
        {
            tie_counter++;
        }

        if (tie_counter == 9)
        {
            return 2;
        }
    }

    return 0;
}

// option 2, two player
void twoPlayerMain(char board[9])
{
    cout << "------------------------------" << "\n";
    cout << "Tic-Tac-Toe : Two Player Game!" << "\n";

    struct player player1;
    struct player player2;

    cout << "Players Assignment: \n\n";
    cin.ignore();

    cout << "Enter the name of the player with symbol 'X': ";
    getline(cin, player1.name);
    player1.symbol = 'X';

    cout << "Enter the name of the player with symbol 'O': ";

    getline(cin, player2.name);
    player2.symbol = 'O';

    displayBoard(board);

    struct player curPlayer = player1;
    struct player oppPlayer = player2;

    while (true)
    {
        cout << curPlayer.name << "'s turn: \n\n";
        movePlacement(board, curPlayer.symbol);
        displayBoard(board);

        if (checkWin(board, curPlayer) == 1)
        {
            cout << curPlayer.name << " Wins The Game! \n\n";
            break;
        }
        else if (checkWin(board, curPlayer) == 2)
        {
            cout << "It's A Tie! \n\n";
            break;
        }

        struct player temp = curPlayer;
        curPlayer = oppPlayer;
        oppPlayer = temp;
    }
}

// option 1, one player
void OnePlayerMain(char board[9])
{
    cout << "------------------------------" << "\n";
    cout << "Tic-Tac-Toe : One Player Game!" << "\n";

    struct player player1;
    struct player player2;

    cout << "Players Assignment: \n\n";
    cin.ignore();

    cout << "Enter the name of the player : ";
    getline(cin, player1.name);
    char bot_symbol;
    cout << "Choose a symbol 'X' or 'O': ";
    while (true)
    {
        cin >> bot_symbol;

        if (bot_symbol >= 'a' && bot_symbol <= 'z')
        {
            bot_symbol = bot_symbol - 'a' + 'A';
        }

        if (bot_symbol == 'X' || bot_symbol == 'O')
        {
            player1.symbol = bot_symbol;
            break;
        }
        else
        {
            cout << "Invalid input! Please enter 'X' or 'O':  ";
        }
    }

    // self assign for bot
    cout << "\nYou will play against \"Max\"! \n";
    player2.name = "Max";
    if (player1.symbol == 'X')
    {
        player2.symbol = 'O';
    }
    else
    {
        player2.symbol = 'X';
    }

    displayBoard(board);

    struct player curPlayer = player1;
    struct player oppPlayer = player2;

    while (true)
    {
        cout << curPlayer.name << "'s turn: \n\n";
        if (curPlayer.name == player1.name)
        {
            movePlacement(board, curPlayer.symbol);
        }
        else
        {
            botMovePlacement(board, curPlayer.symbol, oppPlayer.symbol);
        }

        displayBoard(board);

        if (checkWin(board, curPlayer) == 1)
        {
            cout << curPlayer.name << " Wins The Game! \n\n";
            break;
        }
        else if (checkWin(board, curPlayer) == 2)
        {
            cout << "It's A Tie! \n\n";
            break;
        }

        struct player temp = curPlayer;
        curPlayer = oppPlayer;
        oppPlayer = temp;
    }
}

int main()
{
    char board[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};

    cout << "Welcome To The Tic Tac Toe Game! \n\n";

    int gameplay_option;

    while (true)
    {
        cout << "Game Play Options: \n";
        cout << "------------------ \n";
        cout << "1> One Player Game.\n";
        cout << "2> Two Player Game.\n";
        cout << "3> Exit  The  Game.\n";
        cout << "------------------ \n";

        cout << "Please Choose An Option (1 or 2 or 3): ";
        cin >> gameplay_option;

        if (gameplay_option == 1)
        {
            cout << "\n\n";
            OnePlayerMain(board);
        }
        else if (gameplay_option == 2)
        {
            cout << "\n\n";
            twoPlayerMain(board);
        }
        else if (gameplay_option == 3)
        {
            cout << "\n";
            cout << "Hope you had fun. See you next time! ";
            break;
        }
        else
        {
            cout << "\n";
            cout << "Invalid input! Options available (1 or 2 or 3)! \n";
        }
    }

    return 0;
}
